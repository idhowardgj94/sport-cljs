{"version":3,"sources":["cljss/core.cljs"],"mappings":";AAKA,AAAeA,AAAO,AAACC,AAAK,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAM,AAACC;AAEnC,AAAA,AAAMC;AAAN,AACE,AAAA,AAAAC,AAACC,AAAKC,AAAQP;;AACd,AAACQ,AAAOR,AAAO,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAM,AAACC;;AAExB;;;;AAAA,AAAMM,AAGHC,AAAIC,AAAOC;AAHd,AAIE,AAAMD,AAAO,AAAA,AAAI,AAASA,AAASA,AAAQA;AACrCE,AAAM,AAAA,AAAAR,AAACS,AAAOd;AADpB,AAEE,AAAI,AAACe,AAAQF;AACX,AACE,AAACG,AAAMhB,AAAOiB,AAAK,AAACd;;AACpB,AAACM,AAAAA,AAAAA,AAAIC,AAAAA,AAAIC,AAAAA,AAAOC,AAAAA;;AAClB,AACE,AAAAM,AAAoBP;AAApBQ,AAAAD;AAAAE,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAR,AAAAM;AAAAA,AAAA,AAAAG,AAAAH;AAAAE,AAAQK;AAARP,AAAYT;AAAZ,AACOiB;AADP,AAAA,AAAAV,AAAAA;AACOU,AAAAA;;AADP,AAAA,AAAAJ,AAAAN;AAAAO,AAAA,AAAAJ,AAAAG;AAAAE,AAAA,AAAAZ,AAAAW;AAAAA,AAAA,AAAAF,AAAAE;AAAAC,AAAQC;AAARF,AAAYd;AACLiB,AAAAA;AADP,AAEE,AAAMlB,AAAI,AAAA,AAAKA,AAAQkB;AAAvB,AACE,AAACC,AAAQhB,AAAMc,AAAEjB;;AACjB,AAAU,AAACoB,AAAOnB;AAAlB;AAAA,AACE,AAAOA;AAAO,AAAA,AAAKiB;;;;;;;;AACzB,AAAI,AAAA,AAAM,AAACG,AAAMnB;AACf,AAAMoB,AAAQ,AAAA,AAAa,AAACC,AAAKrB;AAAjC,AACE,AAAA,AAACiB,AAAQhB;AAAT,AAAgB,AAACqB,AAAUF,AAAQpB;AAAMoB;;AACzC,AAAA,AAAKtB,AAAQsB;;AACftB;;;;AAEV;;;;AAAA,AAAMyB,AAGHzB,AAAIC,AAAOC;AAHd,AAIE,AAAMC,AAAM,AAAA,AAAAR,AAACS,AAAOd;AAApB,AACE,AAAI,AAACe,AAAQF;AACX,AACE,AAACG,AAAMhB,AAAOiB,AAAK,AAACd;;AACpB,AAACgC,AAAAA,AAAAA,AAAczB,AAAAA,AAAIC,AAAAA,AAAOC,AAAAA;;AAC5B,AAAMwB,AACA,AAACC,AACC,AAAAC,AAAKX;AAAL,AAAA,AAAAY,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAQE;AAAR,AAAAD,AAAAD,AAAA,AAAA,AAAWG;AAAX,AAAiB,AAACC,AAAahB,AAAEc,AAAGC;AACpC/B,AACAC;AACFgC,AAAU,AAAA,AAAA,AAAkBlC,AAAQ,AAACuB,AAAKrB;AAC1CiC,AAAU,AAAA,AAAA,AAAA,AAAmBD,AAAcR;AANjD,AAOE,AAACP,AAAQhB,AAAMgC,AAAUD;;AACzBA;;;AAGR,AAAA,AAAME,AAAaC;AAAnB,AACE,AAAI,AAAI,AAAAC,AAAUD,AACV,AAASA,AACT,AAAAE,AAASF;AACf,AAAAG,AAA2B,AAAA,AAACK,AAAW,AAACC,AAAKT;AAA7CI,AAAA,AAAA9B,AAAA6B;AAAAE,AAAA,AAAAtC,AAAAqC;AAAAA,AAAA,AAAA5B,AAAA4B;AAAAC,AAAOC;AAAPF,AAAoBG;AAApB,AACE,AAAI,AAAI,AAACxB,AAAOwB,AACR,AAAA,AAACG,AAASJ,AACV,AAAA,AAACI,AAASJ;AAChBN;;AACA,AAAA,AAAI,AAACW,AAAIC,AAAgBL,AACrB,AAACM,AAAKP,AACNQ,AACAC;;;AACRf;;;AAEJ,AAAA,AAAMgB,AAAqBC;AAA3B,AACE,AAAMC,AACID,AACA,AAAA,AAAA,AAAA,AAAA,AAACE,AACDC,AACK,AAAA,AAACC,AAAOC;AAJvB,AAKE,AAAU,AAACvC,AAAOmC;AAAlB;;AAAA,AACE,AAAA,AAAK,AAAA,AAACJ,AAAwBI;;;AAEpC,AAAA,AAAMK,AAAeN,AAAMpD,AAAKF,AAAIC;AAApC,AAEO,AAAC+C,AAAI,AAAAa,AASL,AAAC9D,AAAIC,AAAIC;AATJ,AAAA,AAAA6D,AAAAD;AAAA,AAAA/B,AAAAgC,AAAA,AAAA,AAAM9D;AAAN,AAAA8B,AAAAgC,AAAA,AAAA,AAAUC;AAAV,AACE,AACE,AAAA,AAAK,AAACC,AAAKD,AAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAYC,AAAAA,AAAUJ,AAAAA,AAAAA,AAAAA,AAAAA,AAAAA;AACX,AAAA,AAAAO,AAACtB,AAAwB,AAACwB,AAAMT,AAAG,AAAAvE,AAAA,AAAA,AAAAA,AAAA,AAAMQ;AAAzC,AAAM,AAAAsE,AAAA,AAACC,AAAIjB;AAA/BS,AAAEK,AAAUC,AAAQ,AAAA,AAAA7E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAmC,AAAA,AAAA,AAAA,AAAA;;AAF9D,AAIE,AAACwE,AAAKD;AACN,AAAAvE,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMQ,AAAI,AAAC+D,AAAAA,AAAAA,AAAET,AAAAA;;AALf,AAOQ,AAAA9D,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMQ,AAAI+D;;;;AATzB7D;;AAYP,AAAA,AAAMuE,AAAavE;AAAnB,AACE,AAAA,AAEK,AAAA,AAAAyE,AAACjB,AACD,AAACV,AAAIoB,AACLC,AACAO;AAHA,AAAS,AAAA,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAV,AAAA,AAAAU;AAAA;;AAAA,AAAA,AAAA,AAAAA;AAAA,AAAAT,AAAAS,AAAYR;;AAAZ;;;;AAAA,AAAAD,AAAAS,AAAYR;;AAFrBjE,AACA,AAAC8C,AAAI0B;;AAMZ,AAAA,AAAMG,AAAmBvB;AAAzB,AACE,AAACwB,AACC,AAAKC,AAAE1C,AAAE0B;AAAT,AACE,AAAM1B,AAAE,AAAA2C,AAAM3C;AAAN2C,AAAA,AAAA,AAAAA,AAAA1C,AAAA,AAAA0C,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA;;;;AAEE,AAAC5C,AAAYC;;;;AAFvB,AAGE,AAAC4C,AAAMF,AAAE1C,AAAE0B;AALjB,AAOET;;AAEJ,AAAA,AAAM4B,AAASlF,AAAIC,AAAOC,AAAKiF,AAAMC;AAArC,AACE,AAAMC,AAAK,AAAA,AAAKrF,AAAQ,AAACsF;AACnBrF,AAAO,AAAasF,AACX,AAAA,AAAAC,AAACxC;AAAD,AAAM,AAAAwC,AAACvD,AAAejC,AAAIqF;AAAMpF,AAChCA;AACTC,AAAK,AAAaqF,AACD,AAACvC,AAAI,AAAAyC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA3D,AAAA4D,AAAA,AAAA,AAAMrD;AAAN,AAAAP,AAAA4D,AAAA,AAAA,AAAQ3B;AAAR,AAAA,AAAa,AAAC9B,AAAaI,AAAErC,AAAIqF,AAAMtB;AAAjD7D,AACLA;AACPF,AAAI,AAAauF,AAAKF,AAAKrF;AAPjC,AAQE;AAAKsD,AAAQqC;AAAb,AACE,AAAAC,AAAuB,AAAI,AAACC,AAAKvC,AACR,AAAOA,AAAMqC,AACb,AAAA,AAAU,AAACnB,AAAMsB,AAAMxC,AAAMqC;AAFtD,AAAA7D,AAAA8D,AAAA,AAAA,AAAOtC;AAAP,AAAAxB,AAAA8D,AAAA,AAAA,AAAaD;AAGPI,AAAU,AAACnC,AAAcN,AAAMpD,AAAKF,AAAIC;AACxC+F,AAAW,AAACvB,AAAYvE;AACxBqD,AAAU,AAAK,AAACF,AAAoBC,AAAOyC;AAC3CzC,AAAM,AAAI,AAACkB,AAAMyB,AAAO3C,AAAM,AAAA,AAAA,AAAA,AAAA,AAAC4C,AAAOf,AAAMa,AAClC,AAAA,AAACf,AAAiB1B,AAClBsB;AARhB,AASE,AAACO,AAAAA,AAAAA,AAAe9B,AAAAA,AAAMqC,AAAAA;;AAVrBrC;AAAQqC;;;;AAAAA;;AAARrC,AAAQqC;;;AAARrC;AAAQqC;AAARrC,AAAQqC","names":["cljss.core/sheets","cljs.core.atom","cljs.core/List","cljss.sheet/create-sheet","cljss.core/remove-styles!","cljs.core/deref","cljs.core/run!","cljss.sheet/flush!","cljs.core/reset!","cljss.core/css","cls","static","vars","sheet","cljs.core/first","cljss.sheet/filled?","cljs.core.swap_BANG_","cljs.core/conj","G__41481","vec__41482","seq__41483","cljs.core/seq","first__41484","cljs.core/next","vec__41489","seq__41490","first__41491","s","idx","cljss.sheet/insert!","cljs.core/empty?","cljs.core/count","var-cls","cljs.core/hash","cljss.utils/build-css","cljss.core/css-keyframes","inner","cljs.core.reduce","p__41493","vec__41494","cljs.core.nth","id","val","clojure.string/replace","anim-name","keyframes","cljss.core/-camel-case","k","cljs.core/Keyword","cljs.core/Symbol","vec__41497","seq__41498","first__41499","first-word","words","clojure.string.split","cljs.core/name","cljs.core._EQ_","cljs.core.map","clojure.string/capitalize","cljs.core.conj","clojure.string.join","cljs.core.keyword","cljss.core/-compile-class-name","props","className","cljs.core/select-keys","cljs.core/vals","cljs.core.filter","cljs.core/identity","cljss.core/-mk-var-class","p__41501","vec__41502","v","cljs.core/ifn?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IWithMeta","cljs.core/meta","cljs.core/flatten","p1__41500#","cljs.core.get","cljs.core.apply","cljss.core/-meta-attrs","cljs.core/second","p1__41507#","cljs.core/set","cljss.core/-camel-case-attrs","cljs.core/reduce-kv","m","G__41509","cljs.core.assoc","cljss.core/-styled","attrs","create-element","clsn","cljs.core.gensym","cljss.utils/dev?","p1__41510#","p__41511","vec__41512","children","vec__41515","cljs.core/map?","cljs.core/array","var-class","meta-attrs","cljs.core/dissoc","cljs.core.concat"],"sourcesContent":["(ns cljss.core\n  (:require [cljss.sheet :refer [create-sheet insert! filled? flush!]]\n            [cljss.utils :refer [build-css dev?]]\n            [clojure.string :as cstr]))\n\n(def ^:private sheets (atom (list (create-sheet))))\n\n(defn remove-styles! []\n  (run! flush! @sheets)\n  (reset! sheets (list (create-sheet))))\n\n(defn css\n  \"Takes class name, static styles and dynamic styles.\n   Injects styles and returns a string of generated class names.\"\n  [cls static vars]\n  (let [static (if (string? static) [static] static)\n        sheet (first @sheets)]\n    (if (filled? sheet)\n      (do\n        (swap! sheets conj (create-sheet))\n        (css cls static vars))\n      (do\n        (loop [[s & static] static\n               idx 0]\n          (let [cls (str cls \"-\" idx)]\n            (insert! sheet s cls)\n            (when-not (empty? static)\n              (recur static (inc idx)))))\n        (if (pos? (count vars))\n          (let [var-cls (str \"vars-\" (hash vars))]\n            (insert! sheet #(build-css var-cls vars) var-cls)\n            (str cls \" \" var-cls))\n          cls)))))\n\n(defn css-keyframes\n  \"Takes CSS animation name, static styles and dynamic styles.\n   Injects styles and returns generated CSS animation name.\"\n  [cls static vars]\n  (let [sheet (first @sheets)]\n    (if (filled? sheet)\n      (do\n        (swap! sheets conj (create-sheet))\n        (css-keyframes cls static vars))\n      (let [inner\n            (reduce\n              (fn [s [id val]] (cstr/replace s id val))\n              static\n              vars)\n            anim-name (str \"animation-\" cls \"-\" (hash vars))\n            keyframes (str \"@keyframes \" anim-name \"{\" inner \"}\")]\n        (insert! sheet keyframes anim-name)\n        anim-name))))\n\n;; ==============================\n(defn -camel-case [k]\n  (if (or (keyword? k)\n          (string? k)\n          (symbol? k))\n    (let [[first-word & words] (cstr/split (name k) #\"-\")]\n      (if (or (empty? words)\n              (= \"aria\" first-word)\n              (= \"data\" first-word))\n        k\n        (-> (map cstr/capitalize words)\n            (conj first-word)\n            cstr/join\n            keyword)))\n    k))\n\n(defn -compile-class-name [props]\n  (let [className\n        (-> props\n            (select-keys [:className :class :class-name])\n            vals\n            (->> (filter identity)))]\n    (when-not (empty? className)\n      (str (clojure.string/join \" \" className) \" \"))))\n\n(defn -mk-var-class [props vars cls static]\n  (->> vars\n       (map (fn [[cls v]]\n              (cond\n                (and (ifn? v) (satisfies? IWithMeta v))\n                (->> v meta list flatten (map #(get props % nil)) (apply v) (list cls))\n\n                (ifn? v)\n                (list cls (v props))\n\n                :else (list cls v))))\n       (css cls static)))\n\n(defn -meta-attrs [vars]\n  (->> vars\n       (map second)\n       (filter #(satisfies? IWithMeta %))\n       (map meta)\n       flatten\n       set))\n\n(defn -camel-case-attrs [props]\n  (reduce-kv\n    (fn [m k v]\n      (let [k (case k\n                :for :htmlFor\n                (-camel-case k))]\n        (assoc m k v)))\n    {}\n    props))\n\n(defn -styled [cls static vars attrs create-element]\n  (let [clsn (str cls \"-\" (gensym))\n        static (if ^boolean dev?\n                 (map #(cstr/replace % cls clsn) static)\n                 static)\n        vars (if ^boolean dev?\n               (->> vars (map (fn [[k v]] [(cstr/replace k cls clsn) v])))\n               vars)\n        cls (if ^boolean dev? clsn cls)]\n    (fn [props & children]\n      (let [[props children] (if (map? props)\n                               (array props children)\n                               (array {} (apply array props children)))\n            var-class (-mk-var-class props vars cls static)\n            meta-attrs (-meta-attrs vars)\n            className (str (-compile-class-name props) var-class)\n            props (-> (apply dissoc props (concat attrs meta-attrs [:class :class-name :className]))\n                      (assoc :className className)\n                      -camel-case-attrs)]\n        (create-element props children)))))\n"]}